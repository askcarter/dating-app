// Code generated by protoc-gen-go.
// source: messages.proto
// DO NOT EDIT!

/*
Package helloworld is a generated protocol buffer package.

option go_package = "datingapp/pb";

It is generated from these files:
	messages.proto

It has these top-level messages:
	HelloRequest
	HelloReply
	User
	DebugListUsersRequest
	DebugListUsersResponse
	ChatRequest
	ChatResponse
	HistoryRequest
	HistoryResponse
*/
package helloworld

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The request message containing the user's name.
type HelloRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *HelloRequest) Reset()                    { *m = HelloRequest{} }
func (m *HelloRequest) String() string            { return proto.CompactTextString(m) }
func (*HelloRequest) ProtoMessage()               {}
func (*HelloRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *HelloRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// The response message containing the greetings
type HelloReply struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *HelloReply) Reset()                    { *m = HelloReply{} }
func (m *HelloReply) String() string            { return proto.CompactTextString(m) }
func (*HelloReply) ProtoMessage()               {}
func (*HelloReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *HelloReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type User struct {
	ID          int64   `protobuf:"varint,1,opt,name=iD" json:"iD,omitempty"`
	DisplayName string  `protobuf:"bytes,2,opt,name=displayName" json:"displayName,omitempty"`
	Matches     []int64 `protobuf:"varint,3,rep,packed,name=matches" json:"matches,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *User) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *User) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *User) GetMatches() []int64 {
	if m != nil {
		return m.Matches
	}
	return nil
}

type DebugListUsersRequest struct {
}

func (m *DebugListUsersRequest) Reset()                    { *m = DebugListUsersRequest{} }
func (m *DebugListUsersRequest) String() string            { return proto.CompactTextString(m) }
func (*DebugListUsersRequest) ProtoMessage()               {}
func (*DebugListUsersRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type DebugListUsersResponse struct {
	Users []*User `protobuf:"bytes,1,rep,name=users" json:"users,omitempty"`
}

func (m *DebugListUsersResponse) Reset()                    { *m = DebugListUsersResponse{} }
func (m *DebugListUsersResponse) String() string            { return proto.CompactTextString(m) }
func (*DebugListUsersResponse) ProtoMessage()               {}
func (*DebugListUsersResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *DebugListUsersResponse) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

type ChatRequest struct {
	Message          string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
	Sender           string `protobuf:"bytes,2,opt,name=sender" json:"sender,omitempty"`
	TimestampCreated int64  `protobuf:"varint,3,opt,name=timestamp_created,json=timestampCreated" json:"timestamp_created,omitempty"`
}

func (m *ChatRequest) Reset()                    { *m = ChatRequest{} }
func (m *ChatRequest) String() string            { return proto.CompactTextString(m) }
func (*ChatRequest) ProtoMessage()               {}
func (*ChatRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ChatRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *ChatRequest) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *ChatRequest) GetTimestampCreated() int64 {
	if m != nil {
		return m.TimestampCreated
	}
	return 0
}

type ChatResponse struct {
}

func (m *ChatResponse) Reset()                    { *m = ChatResponse{} }
func (m *ChatResponse) String() string            { return proto.CompactTextString(m) }
func (*ChatResponse) ProtoMessage()               {}
func (*ChatResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type HistoryRequest struct {
}

func (m *HistoryRequest) Reset()                    { *m = HistoryRequest{} }
func (m *HistoryRequest) String() string            { return proto.CompactTextString(m) }
func (*HistoryRequest) ProtoMessage()               {}
func (*HistoryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type HistoryResponse struct {
	ChatHistory []*ChatRequest `protobuf:"bytes,1,rep,name=chatHistory" json:"chatHistory,omitempty"`
}

func (m *HistoryResponse) Reset()                    { *m = HistoryResponse{} }
func (m *HistoryResponse) String() string            { return proto.CompactTextString(m) }
func (*HistoryResponse) ProtoMessage()               {}
func (*HistoryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *HistoryResponse) GetChatHistory() []*ChatRequest {
	if m != nil {
		return m.ChatHistory
	}
	return nil
}

func init() {
	proto.RegisterType((*HelloRequest)(nil), "helloworld.HelloRequest")
	proto.RegisterType((*HelloReply)(nil), "helloworld.HelloReply")
	proto.RegisterType((*User)(nil), "helloworld.User")
	proto.RegisterType((*DebugListUsersRequest)(nil), "helloworld.DebugListUsersRequest")
	proto.RegisterType((*DebugListUsersResponse)(nil), "helloworld.DebugListUsersResponse")
	proto.RegisterType((*ChatRequest)(nil), "helloworld.ChatRequest")
	proto.RegisterType((*ChatResponse)(nil), "helloworld.ChatResponse")
	proto.RegisterType((*HistoryRequest)(nil), "helloworld.HistoryRequest")
	proto.RegisterType((*HistoryResponse)(nil), "helloworld.HistoryResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Greeter service

type GreeterClient interface {
	// Sends a greeting
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
}

type greeterClient struct {
	cc *grpc.ClientConn
}

func NewGreeterClient(cc *grpc.ClientConn) GreeterClient {
	return &greeterClient{cc}
}

func (c *greeterClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := grpc.Invoke(ctx, "/helloworld.Greeter/SayHello", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Greeter service

type GreeterServer interface {
	// Sends a greeting
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
}

func RegisterGreeterServer(s *grpc.Server, srv GreeterServer) {
	s.RegisterService(&_Greeter_serviceDesc, srv)
}

func _Greeter_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.Greeter/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Greeter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "helloworld.Greeter",
	HandlerType: (*GreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _Greeter_SayHello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "messages.proto",
}

// Client API for DatingGame service

type DatingGameClient interface {
	DebugListUsers(ctx context.Context, in *DebugListUsersRequest, opts ...grpc.CallOption) (*DebugListUsersResponse, error)
	SendChat(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (*ChatResponse, error)
	ChatHistory(ctx context.Context, in *HistoryRequest, opts ...grpc.CallOption) (*HistoryResponse, error)
}

type datingGameClient struct {
	cc *grpc.ClientConn
}

func NewDatingGameClient(cc *grpc.ClientConn) DatingGameClient {
	return &datingGameClient{cc}
}

func (c *datingGameClient) DebugListUsers(ctx context.Context, in *DebugListUsersRequest, opts ...grpc.CallOption) (*DebugListUsersResponse, error) {
	out := new(DebugListUsersResponse)
	err := grpc.Invoke(ctx, "/helloworld.DatingGame/DebugListUsers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datingGameClient) SendChat(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (*ChatResponse, error) {
	out := new(ChatResponse)
	err := grpc.Invoke(ctx, "/helloworld.DatingGame/SendChat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datingGameClient) ChatHistory(ctx context.Context, in *HistoryRequest, opts ...grpc.CallOption) (*HistoryResponse, error) {
	out := new(HistoryResponse)
	err := grpc.Invoke(ctx, "/helloworld.DatingGame/ChatHistory", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DatingGame service

type DatingGameServer interface {
	DebugListUsers(context.Context, *DebugListUsersRequest) (*DebugListUsersResponse, error)
	SendChat(context.Context, *ChatRequest) (*ChatResponse, error)
	ChatHistory(context.Context, *HistoryRequest) (*HistoryResponse, error)
}

func RegisterDatingGameServer(s *grpc.Server, srv DatingGameServer) {
	s.RegisterService(&_DatingGame_serviceDesc, srv)
}

func _DatingGame_DebugListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DebugListUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatingGameServer).DebugListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.DatingGame/DebugListUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatingGameServer).DebugListUsers(ctx, req.(*DebugListUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatingGame_SendChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatingGameServer).SendChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.DatingGame/SendChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatingGameServer).SendChat(ctx, req.(*ChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatingGame_ChatHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatingGameServer).ChatHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.DatingGame/ChatHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatingGameServer).ChatHistory(ctx, req.(*HistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DatingGame_serviceDesc = grpc.ServiceDesc{
	ServiceName: "helloworld.DatingGame",
	HandlerType: (*DatingGameServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DebugListUsers",
			Handler:    _DatingGame_DebugListUsers_Handler,
		},
		{
			MethodName: "SendChat",
			Handler:    _DatingGame_SendChat_Handler,
		},
		{
			MethodName: "ChatHistory",
			Handler:    _DatingGame_ChatHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "messages.proto",
}

// Client API for ClientChat service

type ClientChatClient interface {
	Chat(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (*ChatResponse, error)
}

type clientChatClient struct {
	cc *grpc.ClientConn
}

func NewClientChatClient(cc *grpc.ClientConn) ClientChatClient {
	return &clientChatClient{cc}
}

func (c *clientChatClient) Chat(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (*ChatResponse, error) {
	out := new(ChatResponse)
	err := grpc.Invoke(ctx, "/helloworld.ClientChat/Chat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ClientChat service

type ClientChatServer interface {
	Chat(context.Context, *ChatRequest) (*ChatResponse, error)
}

func RegisterClientChatServer(s *grpc.Server, srv ClientChatServer) {
	s.RegisterService(&_ClientChat_serviceDesc, srv)
}

func _ClientChat_Chat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientChatServer).Chat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.ClientChat/Chat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientChatServer).Chat(ctx, req.(*ChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ClientChat_serviceDesc = grpc.ServiceDesc{
	ServiceName: "helloworld.ClientChat",
	HandlerType: (*ClientChatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Chat",
			Handler:    _ClientChat_Chat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "messages.proto",
}

func init() { proto.RegisterFile("messages.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 419 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x93, 0xcf, 0x8b, 0xd3, 0x40,
	0x14, 0xc7, 0x37, 0x4d, 0xdd, 0x5d, 0x5f, 0x96, 0x58, 0x07, 0xec, 0x86, 0x78, 0x89, 0x73, 0x58,
	0x0a, 0x42, 0x0f, 0xf1, 0x24, 0x82, 0x0a, 0x0d, 0x6c, 0x0b, 0xc5, 0x43, 0x8a, 0x07, 0x4f, 0x32,
	0x6d, 0x1e, 0xcd, 0xc0, 0xe4, 0x87, 0x33, 0x53, 0x24, 0xff, 0xb6, 0x7f, 0x81, 0x64, 0x32, 0xa9,
	0xa9, 0xb6, 0x1e, 0xf6, 0x96, 0xf7, 0xbe, 0xef, 0x7d, 0xf3, 0x3e, 0xef, 0x31, 0xe0, 0x17, 0xa8,
	0x14, 0xdb, 0xa3, 0x9a, 0xd7, 0xb2, 0xd2, 0x15, 0x81, 0x1c, 0x85, 0xa8, 0x7e, 0x56, 0x52, 0x64,
	0x94, 0xc2, 0xdd, 0xb2, 0x8d, 0x52, 0xfc, 0x71, 0x40, 0xa5, 0x09, 0x81, 0x71, 0xc9, 0x0a, 0x0c,
	0x9c, 0xc8, 0x99, 0x3d, 0x4f, 0xcd, 0x37, 0x7d, 0x00, 0xb0, 0x35, 0xb5, 0x68, 0x48, 0x00, 0x37,
	0xd6, 0xcf, 0x16, 0xf5, 0x21, 0x4d, 0x61, 0xfc, 0x55, 0xa1, 0x24, 0x3e, 0x8c, 0x78, 0x62, 0x44,
	0x37, 0x1d, 0xf1, 0x84, 0x44, 0xe0, 0x65, 0x5c, 0xd5, 0x82, 0x35, 0x5f, 0x5a, 0xeb, 0x91, 0xe9,
	0x1a, 0xa6, 0x8c, 0x27, 0xd3, 0xbb, 0x1c, 0x55, 0xe0, 0x46, 0xee, 0xcc, 0x4d, 0xfb, 0x90, 0xde,
	0xc3, 0xab, 0x04, 0xb7, 0x87, 0xfd, 0x9a, 0x2b, 0xdd, 0x9a, 0x2b, 0x3b, 0x28, 0xfd, 0x0c, 0xd3,
	0xbf, 0x05, 0x55, 0x57, 0xa5, 0x42, 0xf2, 0x00, 0xcf, 0x0e, 0x6d, 0x22, 0x70, 0x22, 0x77, 0xe6,
	0xc5, 0x93, 0xf9, 0x1f, 0xdc, 0x79, 0x5b, 0x99, 0x76, 0x32, 0x15, 0xe0, 0x2d, 0x72, 0xa6, 0x7b,
	0xf2, 0x8b, 0x5c, 0x64, 0x0a, 0xd7, 0x0a, 0xcb, 0x0c, 0xa5, 0x1d, 0xdd, 0x46, 0xe4, 0x2d, 0xbc,
	0xd4, 0xbc, 0x40, 0xa5, 0x59, 0x51, 0x7f, 0xdf, 0x49, 0x64, 0x1a, 0xb3, 0xc0, 0x35, 0xd8, 0x93,
	0xa3, 0xb0, 0xe8, 0xf2, 0xd4, 0x87, 0xbb, 0xee, 0x6f, 0xdd, 0x94, 0x74, 0x02, 0xfe, 0x92, 0x2b,
	0x5d, 0xc9, 0xa6, 0x27, 0x5a, 0xc3, 0x8b, 0x63, 0xc6, 0xa2, 0xbc, 0x07, 0x6f, 0x97, 0x33, 0x6d,
	0xd3, 0x16, 0xe8, 0x7e, 0x08, 0x34, 0x20, 0x48, 0x87, 0xb5, 0xf1, 0x0a, 0x6e, 0x1e, 0x25, 0xa2,
	0x46, 0x49, 0x3e, 0xc2, 0xed, 0x86, 0x35, 0xe6, 0x84, 0x24, 0x18, 0x36, 0x0f, 0x2f, 0x1f, 0x4e,
	0xcf, 0x28, 0xb5, 0x68, 0xe8, 0x55, 0xfc, 0xcb, 0x01, 0x48, 0x98, 0xe6, 0xe5, 0xfe, 0xb1, 0x3d,
	0xd6, 0x37, 0xf0, 0x4f, 0x37, 0x4f, 0xde, 0x0c, 0x5b, 0xcf, 0x9e, 0x2b, 0xa4, 0xff, 0x2b, 0xb1,
	0x2b, 0xb9, 0x22, 0x9f, 0xe0, 0x76, 0x83, 0x65, 0xd6, 0x42, 0x91, 0x4b, 0x98, 0x61, 0xf0, 0xaf,
	0x70, 0x34, 0x58, 0x76, 0x37, 0xb5, 0x4b, 0x20, 0xe1, 0x09, 0xd3, 0xc9, 0xba, 0xc3, 0xd7, 0x67,
	0xb5, 0xde, 0x29, 0x5e, 0x01, 0x2c, 0x04, 0xc7, 0x52, 0x9b, 0x61, 0x3e, 0xc0, 0xf8, 0xc9, 0x43,
	0x6d, 0xaf, 0xcd, 0xb3, 0x7b, 0xf7, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x97, 0xf0, 0x09, 0x15, 0x88,
	0x03, 0x00, 0x00,
}
